#!/bin/bash



# Variables

project_dir="<%= node['deploy']['project_dir'] %>"
git_dir="$project_dir/git"
work_dir="$project_dir/current"
shared_dir="$project_dir/shared"

rails_env='production'

puma_config="<%= node['puma']['config_path'] %>"
puma_pid_path="<%= node['puma']['pid_path'] %>"
puma_state_path="<%= node['puma']['state_path'] %>"
puma_log_dir="<%= node['puma']['log_dir'] %>"



# Functions

function create_puma_log_directory {
  if [ -d $puma_log_dir ]; then
    echo ""
    echo "Puma log directory exists at '$puma_log_dir'"
  else
    echo ""
    echo "Creating Puma log directory: '$puma_log_dir'"
    mkdir -p $puma_log_dir
  fi
}


function create_work_directory {
  if [ -d $work_dir ]; then
    echo ""
    echo "App directory exists at '$work_dir'"
  else
    echo ""
    echo "Creating directory for production app: '$work_dir'"
    mkdir -p $work_dir
  fi
}


function copy_project_files {
  echo ""
  echo "Copying files to '$work_dir'"
  git --work-tree $work_dir --git-dir $git_dir checkout --force
}


function install_yarn_modules {
  echo ""
  echo "Installing Yarn modules"
  yarn install
}


function prepare_assets {
  echo ""
  echo "Cleaning old assets"
  bundle exec rake assets:clean

  echo ""
  echo "Precompiling assets"
  bundle exec rake assets:precompile
}


function create_database {
  # if [ table_exists == 1 ]; then
  #   echo ""
  #   echo "Tables exist"
  # else
  #   echo ""
  #   echo "Tables do not exist, loading schema"
  #   bundle exec rake db:schema:load
  # fi

  echo ""
  echo "Creating database"
  bundle exec rake db:create
}


function migrate_database {
  echo ""
  echo "Migrating"
  bundle exec rake db:migrate
}


function prepare_env {
  echo ""
  echo "Sourcing profile files"
  source "/etc/profile"
  source "/etc/environment"

  echo ""
  echo "Sourcing ChRuby"
  source "/etc/profile.d/chruby.sh"
}


function install_gems {
  echo ""
  echo "Running 'bundle install'"
  echo ""
  bundle install
}


function redis_started {
  service redis status | grep -c '6379'
}


function restart_nginx {
  echo "Restarting NGINX"
  service nginx restart
}


function restart_redis {
  if [[ $(redis_started) == 1 ]]; then
    echo ""
    echo "Redis is running"
  else
    echo ""
    echo "Redis is down; starting"
    service redis start
  fi
}


function start_puma {
  echo ""
  echo "Starting Puma"
  echo "Using Puma config from '$puma_config'"
  echo ""
  bundle exec pumactl --config-file $puma_config start
}


function stop_puma {
  echo ""
  echo "Checking Puma"
  if [ -f $puma_pid_path ]; then
    echo "Puma pid file present at '$puma_pid_path'"
    echo "Stopping Puma"
    # pumactl --config-file $puma_config stop
    pumactl --state $puma_state_path stop
  else
    echo "No Puma pid file, Puma seems to be down"
  fi
}


# function table_exists {
#   psql --command "SELECT count(*) from information_schema.tables WHERE table_name = 'users'" \
#        --user $db_user --dbname $db_name | grep -c ' 1'
# }


function create_a_directory_symlink {
  # Если в пути `destination` не указать название симлинка,
  # оно будет равно названию оригинальной папки
  # но тут нужно обязательно указывать название симлинка,
  # чтобы можно было его удалять перед созданием нового

     original=$1
  destination=$2

  echo ""
  if [ -d $original ]; then

    # тут важно не похерить родительскую папку, а удалить именно симлинк
    echo "Removing old symlink '$destination'"
    rm $destination

    echo "Creating symbolic link for '$original' in '$destination'"
    ln -s $original $destination
  else
    echo "Symbolic link not created — '$original' does not exist"
  fi
}


function create_a_file_symlink {
     original=$1
  destination=$2

  echo ""
  if [ -f $original ]; then
    echo "Removing old symlink '$destination'"
    rm $destination

    echo "Creating symbolic link for '$original' in '$destination'"
    ln -s $original $destination
  else
    echo "Symbolic link not created — '$original' does not exist"
  fi
}


function link_assets_folder {
     original="$shared_dir/public/assets"
     mkdir -p $original

  destination="$work_dir/public/assets"
     mkdir -p "$work_dir/public"

  if [ -d $destination ]; then
    mv $destination $original
  fi

  create_a_directory_symlink $original $destination
}


function link_credentials_file {
  create_a_file_symlink "$shared_dir/config/secrets.yml" "$work_dir/config/secrets.yml"
}


function link_master_key_file {
  create_a_file_symlink "$shared_dir/config/master.key" "$work_dir/config/master.key"
}


function link_tmp_folder {
     original="$shared_dir/tmp"
  destination="$work_dir/tmp"

  if [ -d $destination ]; then
    mv $destination $original
  fi

  create_a_directory_symlink $original $destination
}


function link_uploads_folder {
     original="$shared_dir/public/uploads"
     mkdir -p $original

  destination="$work_dir/public/uploads"
     mkdir -p "$work_dir/public"

  create_a_directory_symlink "$shared_dir/public/uploads" "$work_dir/public/uploads"
}



# Execution

while read oldrev newrev ref; do
  if [[ $ref =~ .*/master$ ]]; then
    echo ""; echo "Master ref received. Deploying master branch to production..."

    prepare_env
    stop_puma
    create_puma_log_directory
    create_work_directory
    copy_project_files
    link_assets_folder
    link_uploads_folder
    link_tmp_folder
    link_credentials_file
    link_master_key_file
    cd $work_dir; echo ""; echo "Entering directory '$PWD'"
    install_gems
    install_yarn_modules
    create_database
    migrate_database
    prepare_assets
    start_puma
    restart_redis
    restart_nginx

    echo ""; echo "Git hooks deploy complete"
  else
    echo "Ref $ref successfully received, but only the master branch may be deployed on this server."
    exit 0
  fi
done
